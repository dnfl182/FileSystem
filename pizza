

////FileSystem


void freeDataBlock(FileSystem * fileSystem , int num)
{
	memset(fileSystem -> dataBlock[num] -> data , 0 , 128);
	setBit(fileSystem -> superBlock -> dataBlockCheck , num , 0);
}
void freeInode(FileSystem * fileSystem , int num)
{
	Inode * inode = fileSystem -> inode[num];
	inode -> type = 0;
	int size = inode -> size;
	int realSize = getRealSize(inode);
	inode -> size = 0;
	DataBlockList * list = inode -> data;
	DataBlockNode * header = list -> head;
	DataBlockNode * bh = NULL;
	int i = 0;
	//////////데이터 블럭 해방 
	for(i = 0; i < realSize; i++)
		freeDataBlock(fileSystem , getDataBlockInode(fileSystem ,inode , i) -> num);
	if(size > 1)
	{
		freeDataBlock(fileSystem , inode -> data -> head -> next -> value -> num);
	}
	if(size > 104)
	{
		DataBlock * ad = inode -> data -> head -> next -> next -> value;
		DataBlock * ap;
		for(i = 0; i < 102; i++)
			freeDataBlock(fileSystem , getDataBlockIndirect(fileSystem , ad , i) -> num);
		freeDataBlock(fileSystem , ad -> num);
	}
	//////////////////////////////
	while(header -> next != list -> tail)
	{
		bh = header;
		header = header -> next;
		free(bh);
	}
	if(bh == NULL)
		free(list -> tail);
	free(list -> tail);
	free(list);
	free(fileSystem -> inode[num]);
	initInode(&(fileSystem -> inode[num]));
	setBit(fileSystem -> superBlock -> inodeCheck , num , 0);
}








////SHALL



void removeDTree(DTree * parent , char * fileName)
{
	DNode * header = parent -> childHead;
	DNode * bh;
	while(header -> next != NULL)
	{
		bh = header;
		header = header -> next;
		if(strcmp(header -> value -> fileName , fileName) == 0)
		{
			bh -> next = header -> next;
			removeDTreeHelper(header -> value);
			break;
		}
	}
}
void removeFile(Shall * shall , char * path)
{
	Inode * file = getInodePath(shall , path);
	char tPath[1000];
	strcpy(tPath , path);
	//////////DTree 에서 제거 
	char * fileName = getFileNamePath(path);
	removeFileNamePath(path);
	DTree * parent = findDTreePath(shall , path);
	removeDTree(parent , fileName);
	///////////////////////
	////Inode 에서 제거
	removeFileNamePath(tPath);
	Inode * parentDirectory =  getInodePath(shall , tPath);
	int parentSize = getRealSize(parentDirectory);
	int i = 0;	
	while(1) 
	{
		if(i * 41 + 41 < parentSize * 128)
			break;
		char * afile = getDataInode(shall -> fileSystem , parentDirectory , i * 41 , 32);
		if(strcmp(afile , fileName) == 0)
		{
			printf("성공");
			char source[10] = {0};
			setDataInode(shall -> fileSystem , parentDirectory , i * 41 , 41 , 0 , source);	// 비우기
			break;
		}
		++i; 
	}

	///// 
	freeInode(shall -> fileSystem , file -> num); 
	free(fileName);
}

void myrmdir(Shall * shall , char *path)
{
	char tPath[1000] = {0};
	strcpy(tPath , path);
	makeAPath(shall , tPath);
	if(getInodePath(shall , tPath) -> type == 1)
		removeFile(shall , tPath);
	
}
myrm(Shall * shall , char * path)
{
	char tPath[1000] = {0};
	strcpy(tPath , path);
	makeAPath(shall , tPath);
	if(getInodePath(shall , tPath) -> type == 0)
	{
		removeFile(shall , tPath);
	}
}
void mymv(Shall * shall , char * path1 , char * path2)
{
	char tPath1[1000];
	strcpy(tPath1 , path1);
	Inode * file1 = getInodePath(shall , path1);
	Inode * file2 = getInodePath(shall , path2);
	if(file2 == NULL)	// FILE
	{
		mycp(shall , path1 , path2);
	}
	else
	{
		char * fileName = getFileNamePath(path1);
		char tPath[1000] = {0};
		strcpy(tPath , path2);
		if(strcmp(tPath , "/") != 0)
			strcat(tPath,  "/");
		strcat(tPath , fileName);
		mycp(shall , path1 , tPath);
	}
	myrm(shall , tPath1);
}

